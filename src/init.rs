use std::fs;

use crate::system::{set_memory, set_pc};

pub const ROM_PATH: &str = "./ibm_logo.ch8";

/// Initialize memory:
/// - Set the font data at 0x50
fn init_memory() {
    // Set font
    let font: [u8; 80] = [
        0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
        0x20, 0x60, 0x20, 0x20, 0x70, // 1
        0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
        0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
        0x90, 0x90, 0xF0, 0x10, 0x10, // 4
        0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
        0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
        0xF0, 0x10, 0x20, 0x40, 0x40, // 7
        0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
        0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
        0xF0, 0x90, 0xF0, 0x90, 0x90, // A
        0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
        0xF0, 0x80, 0x80, 0x80, 0xF0, // C
        0xE0, 0x90, 0x90, 0x90, 0xE0, // D
        0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
        0xF0, 0x80, 0xF0, 0x80, 0x80, // F
    ];

    for (i, item) in font.iter().enumerate() {
        set_memory((0x50 + i) as u16, *item);
    }

    // Initialize the ROM
    let rom_bytes = fs::read(ROM_PATH).expect("failed to read rom file");
    for (i, item) in rom_bytes.iter().enumerate() {
        set_memory((0x200 + i) as u16, *item);
    }
}

/// Initialize the PC:
/// - Set the PC to 0x200
fn init_pc() {
    set_pc(0x200);
}

pub fn init() {
    init_memory();
    init_pc();
}
